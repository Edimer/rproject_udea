sessionInfo()
install.packages(c("tidymodels", "infer", "h2o", "mlr3", "reticulate", "xgboost", "lightgbm", "shinydashboard", "shinydashboardPlus", "shinycssloaders", "shinyjs", "flexdashboard", "bslib", "thematic", "GGally", "corrplot", "cowplot", "ggpubr", "car", "FactoMineR", "factoextra", "explor", "DataExplorer", "skimr", "cluster", "rticles", "xaringan", "xaringanthemer"))
install.packages(c("actuar", "cluster", "distr6", "DT", "expint", "fansi", "greybox", "MASS", "Matrix", "nlme", "plyr", "processx", "RandomFieldsUtils", "readxl", "seriation", "survival"))
install.packages(c("actuar", "cluster", "distr6", "expint", "fansi", "greybox", "nlme", "plyr", "processx", "RandomFieldsUtils", "readxl", "seriation"))
devtools::install_github("gadenbuie/xaringanExtra")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(tidymodels)
df_turistas <- read_csv("Train.csv")
df_turistas %>% head()
set.seed(2022)
particion_inicial <- initial_split(data = df_turistas, prop = 0.8, strata = total_cost)
train <- training(particion_inicial)
test <- testing(particion_inicial)
train %>%
pull(total_cost) %>%
range()
test %>%
pull(total_cost) %>%
range()
set.seed(2022)
submuestras_kfold <- vfold_cv(data = df_turistas, v = 5, repeats = 1, strata = total_cost)
submuestras_kfold %>% slice(1) %>% pull(splits)
set.seed(2022)
submuestras_boots <- bootstraps(data = df_turistas, times = 5, strata = total_cost)
train
df_modelos <- df_turistas %>%
select(-ID) %>%
na.omit()
modelo_lm <- lm(total_cost ~ ., data = df_modelos)
summary(modelo_lm)
linear_reg() %>%
set_mode("regression") %>%
set_engine("lm")
linear_reg() %>%
set_mode("classification") %>%
set_engine("lm")
linear_reg() %>%
set_mode("regression") %>%
set_engine("lm")
# Arquitectura con lm
modelo_tidy_lm <- linear_reg() %>%
set_mode("regression") %>%
set_engine("lm")
# Arquitectura con glmnet
modelo_tidy_glmnet <- linear_reg() %>%
set_mode("regression") %>%
set_engine("glmnet")
# Arquitectura con keras
modelo_tidy_keras <- linear_reg() %>%
set_mode("regression") %>%
set_engine("keras")
modelo_tidy_lm
modelo_tidy_glmnet
modelo_tidy_keras
# Arquitectura con lm
modelo_tidy_lm <- linear_reg() %>%
set_mode("regression") %>%
set_engine("lm")
# Arquitectura con glmnet
modelo_tidy_glmnet <- linear_reg() %>%
set_mode("regression") %>%
set_engine("glmnet")
# Arquitectura con keras
modelo_tidy_keras <- linear_reg() %>%
set_mode("regression") %>%
set_engine("keras")
modelo_tidy_lm
modelo_tidy_lm
modelo_tidy_glmnet
modelo_tidy_keras
modelo_tidy_lm %>%
fit(total_cost ~ ., data = df_modelos)
summary(modelo_lm)
ajuste_tidy_lm <-
modelo_tidy_lm %>%
fit(total_cost ~ ., data = df_modelos)
?model.matrix
library(tidyverse)
edimer <- iris %>% slice(1:100)
View(edimer)
mod <- glm(Species ~ ., data = edimer)
edimer <- iris %>% slice(1:100) %>%
mutate(target = as.numeric(Species))
mod <- glm(target ~ ., data = edimer)
summary(mod)
summary(mod)
mod <- glm(target ~ Sepal.Width + Sepal.Length, data = edimer)
summary(mod)
datos_sepalw <- seq(from = min(edimer$Sepal.Width), to = max(edimer$Sepal.Length), size = 50)
datos_sepalw <- seq(from = min(edimer$Sepal.Width), to = max(edimer$Sepal.Length), length.out = 50)
datos_sepalw
datos_sepalw <- seq(from = min(edimer$Sepal.Width),
to = max(edimer$Sepal.Width),
length.out = 50)
datos_sepall <- seq(from = min(edimer$Sepal.Length),
to = max(edimer$Sepal.Length),
length.out = 50)
expand.grid(datos_sepalw, datos_sepall)
pelos <- expand.grid(datos_sepalw, datos_sepall)
View(pelos)
pelos <- expand.grid(Sepal.Width = datos_sepalw, Sepal.Length = datos_sepall)
ficticia <- data.frame(Sepal.Width = datos_sepalw,
Sepal.Length = datos_sepall)
View(ficticia)
predicciones <- predict(mod, newdata = pelos)
predicciones %>% head()
predicciones <- predict(mod, newdata = pelos, type = "response")
predicciones %>% head()
predicciones <- predict(mod, newdata = pelos, type = "prob")
predicciones <- predict(mod, newdata = pelos, type = "response")
predicciones %>% head()
mod <- glm(as.factor(target) ~ Sepal.Width + Sepal.Length, data = edimer)
edimer <- iris %>% slice(1:100) %>%
mutate(target = as.numeric(Species) - 1)
mod <- glm( ~ Sepal.Width + Sepal.Length, data = edimer)
summary(mod)
mod <- glm( ~ Sepal.Width + Sepal.Length, data = edimer)
mod <- glm(target ~ Sepal.Width + Sepal.Length, data = edimer)
summary(mod)
datos_sepalw <- seq(from = min(edimer$Sepal.Width),
to = max(edimer$Sepal.Width),
length.out = 50)
datos_sepall <- seq(from = min(edimer$Sepal.Length),
to = max(edimer$Sepal.Length),
length.out = 50)
pelos <- expand.grid(Sepal.Width = datos_sepalw, Sepal.Length = datos_sepall)
ficticia <- data.frame(Sepal.Width = datos_sepalw,
Sepal.Length = datos_sepall)
predicciones <- predict(mod, newdata = pelos, type = "response")
predicciones %>% head()
predicciones <- predict(mod, newdata = pelos, type = "link")
predicciones %>% head()
predicciones <- predict(mod, newdata = pelos, type = "response")
pelos$predichos <- predicciones
x11()
pelos %>%
ggplot(aes(x =Sepal.Width, y = predichos)) +
geom_line()
mod <- glm(target ~ Sepal.Width + I(Sepal.Length^2), data = edimer)
summary(mod)
datos_sepalw <- seq(from = min(edimer$Sepal.Width),
to = max(edimer$Sepal.Width),
length.out = 50)
datos_sepall <- seq(from = min(edimer$Sepal.Length),
to = max(edimer$Sepal.Length),
length.out = 50)
pelos <- expand.grid(Sepal.Width = datos_sepalw, Sepal.Length = datos_sepall)
ficticia <- data.frame(Sepal.Width = datos_sepalw,
Sepal.Length = datos_sepall)
predicciones <- predict(mod, newdata = pelos, type = "response")
pelos$predichos <- predicciones
pelos %>%
ggplot(aes(x =Sepal.Width, y = predichos)) +
geom_line()
pelos %>%
ggplot(aes(x =Sepal.Length, y = predichos)) +
geom_line()
summary(mod)
edimer <- iris %>% slice(1:100) %>%
mutate(target = as.character(as.numeric(Species) - 1))
mod <- glm(target ~ Sepal.Width + I(Sepal.Length^2), data = edimer)
edimer <- iris %>% slice(1:100) %>%
mutate(target = as.factor(as.numeric(Species) - 1))
mod <- glm(target ~ Sepal.Width + I(Sepal.Length^2), data = edimer)
edimer <- iris %>% slice(1:100) %>%
mutate(target = as.numeric(Species) - 1)
mod <- glm(target ~ Sepal.Width + I(Sepal.Length^2), data = edimer)
summary(mod)
datos_sepalw <- seq(from = min(edimer$Sepal.Width),
to = max(edimer$Sepal.Width),
length.out = 50)
datos_sepall <- seq(from = min(edimer$Sepal.Length),
to = max(edimer$Sepal.Length),
length.out = 50)
pelos <- expand.grid(Sepal.Width = datos_sepalw, Sepal.Length = datos_sepall)
ficticia <- data.frame(Sepal.Width = datos_sepalw,
Sepal.Length = datos_sepall)
predicciones <- predict(mod, newdata = pelos, type = "response")
pelos$predichos <- predicciones
x11()
pelos %>%
ggplot(aes(x =Sepal.Length, y = predichos)) +
geom_line()
predicciones <- predict(mod, newdata = pelos)
pelos %>%
ggplot(aes(x =Sepal.Length, y = predichos)) +
geom_line()
predicciones <- predict(mod, newdata = ficticia)
pelos$predichos <- predicciones
pelos %>%
ggplot(aes(x =Sepal.Length, y = predichos)) +
geom_line()
pelos %>%
ggplot(aes(x =Sepal.Width, y = predichos)) +
geom_line()
log10(22)
22^1.342423
1.342423^22
10^1.342423
gtools::combinations(n = 4, r = 2)
library(tidyverse)
read_csv("http://bit.ly/PNwfkv")
read_tsv("http://bit.ly/PNwfkv")
prueba <- read_tsv("http://bit.ly/PNwfkv")
View(prueba)
setwd("D:/Otros/Github/rproject_udea")
reticulate::repl_python()
2+2
texto = ["edimer hola como"]
texto.spli()
texto = "edimer hola como"
texto.spli()
texto.split()
import pandas as pd
import pandas as pd
dfTipoEntidades = pd.DataFrame(data=prueba)
prueba = {'tipoEntidad': [1, 2]}
dfTipoEntidades = pd.DataFrame(data=prueba)
View(dfTipoEntidades)
prueba = {'tipoEntidad': ["502 sociedades administrados", "120 edimer david jaramillo"]}
dfTipoEntidades = pd.DataFrame(data=prueba)
View(dfTipoEntidades)
arr=int(dfTipoEntidades.select(size(split(col("tipoEntidad"),"\s+")).alias("size")).orderBy(desc("size")).collect()[0][0])
import pyspark
import pandas as pd
import pyspark
prueba = {'tipoEntidad': ["502 sociedades administrados", "120 edimer david jaramillo"]}
dfTipoEntidades = pd.DataFrame(data=prueba)
arr=int(dfTipoEntidades.select(size(split(col("tipoEntidad"),"\s+")).alias("size")).orderBy(desc("size")).collect()[0][0])
log((100 / 90))
log((100 / 10))
log((90 / 100))
log((10 / 100))
log((1 / 100))
log((99 / 100))
log((102 / 100))
log((10 / 100))
log((100 / 100))
log((0 / 100))
library(tidyverse)
datos <- read_csv("temas/data/Evaluaciones_Agropecuarias_Municipales___EVA._2019_-_2021._Base_Agr_cola.csv")
View(datos)
datos %>% glimpse()
